#! @bashlocation@
#########################################################################
#									#
#	lxcu-create.sh is automatically generated,			#
#		please do not modify!					#
#									#
#########################################################################

#########################################################################
#									#
# Script ID: lxcu-create.sh						#
# Author: Copyright (C) 2020-2023  Mark Grant				#
#									#
# Released under the GPLv3 only.					#
# SPDX-License-Identifier: GPL-3.0-only					#
#									#
# Purpose:								#
# A script to create linux containers.					#
#									#
# Syntax:	lxcu-create.sh [ -a or --arch 'arch-name'		#
#			|| -d or --dist 'distribution-name'		#
#			|| -h or --help					#
#			|| -n or --name 'container name'		#
#			|| -r or --rel 'release-name'			#
#			|| -t or --type 'type-name'			#
#			|| -V or --version ]				#
#									#
# Exit codes used:-							#
# Bash standard Exit Codes:	0 - success				#
#				1 - general failure			#
# User-defined exit code range is 64 - 113				#
#	C/C++ Semi-standard exit codes from sysexits.h range is 64 - 78	#
#		EX_USAGE	64	command line usage error	#
#		EX_DATAERR	65	data format error		#
#		EX_NOINPUT	66	cannot open input		#
#		EX_NOUSER	67	addressee unknown		#
#		EX_NOHOST	68	host name unknown		#
#		EX_UNAVAILABLE	69	service unavailable		#
#		EX_SOFTWARE	70	internal software error		#
#		EX_OSERR	71	system error (e.g., can't fork)	#
#		EX_OSFILE	72	critical OS file missing	#
#		EX_CANTCREAT	73	can't create (user) output file	#
#		EX_IOERR	74	input/output error		#
#		EX_TEMPFAIL	75	temp failure; user is invited	#
#					to retry			#
#		EX_PROTOCOL	76	remote error in protocol	#
#		EX_NOPERM	77	permission denied		#
#		EX_CONFIG	78	configuration error		#
#	User-defined (here) exit codes range 79 - 113:			#
#		None							#
#									#
# Further Info:								#
#									#
#########################################################################

#########################################################################
#									#
# Changelog								#
#									#
# Date		Author	Version	Description				#
#									#
# 23/09/2020	MG	1.0.1	Created.				#
# 05/10/2020	MG	1.0.2	Replace sleeps with network wait in	#
#				lxcu-start.sh				#
# 18/11/2020	MG	1.0.3	Do initial install of apt https prior	#
#				to adding repo for server-dependency to	#
#				avoid hang on https comms.		#
#				Ensure apt update is run after changing	#
#				repos.					#
#				Do apt-get update after apt-key update.	#
# 13/02/2021	MG	1.0.4	Use OBS instead of Bintray.		#
#				Prepend this package executable		#
#				invocations with bindir.		#
# 14/03/2021	MG	1.0.5	Install hermes and OBS / PPA key	#
#				scripts with apt-key-scripts.sh in	#
#				debian / ubuntu setup.			#
# 26/07/2021	MG	1.0.6	Add locale generation.			#
# 27/07/2021	MG	1.0.7	Reduce container start /stop to once,	#
#				otherwise causes networking		#
#				connectivity problems.			#
# 06/08/2021	MG	1.0.8	Use an alternative keyserver following	#
#				the demise of sks-keyservers.net	#
#				Retrieve OBS release number from new	#
#				debian-releases.conf			#
# 21/08/2021	MG	1.0.9	Nothing is cast in stone at the dist	#
#				level, even apt, so put everything	#
#				under dist/rel.				#
# 03/09/2021	MG	1.0.10	With lxc v4 lxc start and attach need	#
#				slightly different privileges. The	#
#				altered commands also work pre-v4.	#
# 18/09/2021	MG	1.1.0	Add support for Fedora.			#
# 20/09/2021	MG	1.2.0	Add support for openSUSE.		#
# 26/09/2021	MG	1.2.1	Setup some git defaults.		#
# 28/11/2021	MG	1.2.2	Tighten SPDX tag.			#
# 11/01/2022	MG	1.2.3	Use lxcu-attach.sh AOT systemd-run	#
#				lxc-attach				#
#				Correct dnf list --autoremove to	#
#				actually remove with dnf autoremove.	#
#				Standardise locale setup from config	#
#				file using localectl.			#
# 23/01/2022	MG	1.2.4	Get OBS repo key from source AOT this	#
#				package as the key would expire if not	#
#				updated every 2 years.			#
# 04/05/2022	MG	1.2.5	Remove set-keymap as set-x11-keymap	#
#				sets the virtual console which is all	#
#				that is needed. Also setting the	#
#				console errors on jammy with keymap not	#
#				found.					#
# 23/06/2022	MG	1.2.6	OBS repo URL has changed for 15.4	#
# 31/03/2023	MG	1.2.7	Ignore comment lines in install and	#
#				cache.list file processing.		#
# 28/04/2023	MG	1.2.8	Remove unused variable outputprefix.	#
#									#
#########################################################################


set -o pipefail


##################
# Init variables #
##################
readonly version=1.2.8				# Script version
readonly packageversion=@pkgversion@		# Package version

readonly hostetclocation=@sysconfdir@		# Path to config directory
readonly etclocation=@sysconfdir@/lxcu		# Path to lxcu config directory

obs_rel=""	# OBS Release number (Debian)

# Ensure environment variables are set.
export XDG_RUNTIME_DIR="/run/user/$UID"
export DBUS_SESSION_BUS_ADDRESS="unix:path=${XDG_RUNTIME_DIR}/bus"


#############
# Functions #
#############

# -h --help output.
# No parameters
# No return value
usage()
{
cat << EOF
Usage is $0 [options]
	-a or --arch 'arch-name' Architecture for the container
	-d or --dist 'distribution-name'
	-h or --help Display this help information
	-n or --name 'container name'
	-r or --rel 'release-name'
	-t or --type 'type-name' e.g. basic or dev.....
	-V or --version Print script version information
EOF
}

# Standard function to emit messages depending on various parameters.
# Parameters -	$1 What:-	The message to emit.
#		$2 Where:-	stdout == 0
#				stderr == 1
# No return value.
output()
{
	if (( !$2 )); then
		printf "%s\n" "$1"
	else
		printf "%s\n" "$1" 1>&2
	fi
}

# Standard function to tidy up and return exit code.
# Parameters - 	$1 is the exit code.
# No return value.
script_exit()
{
	exit $1
}

# Standard function to test command error and exit if non-zero.
# Parameters - 	$1 is the exit code, (normally $? from the preceeding command).
# No return value.
std_cmd_err_handler()
{
	if (( $1 )); then
		script_exit $1
	fi
}

# Standard trap exit function.
# No parameters.
# No return value.
trap_exit()
{
	local -i exit_code=$?
	local msg

	msg="Script terminating with exit code $exit_code due to trap received."
	output "$msg" 1
	script_exit $exit_code
}

# Setup trap
trap trap_exit SIGHUP SIGINT SIGQUIT SIGTERM

# Debian / Raspbian only. Convert the usual release string into an OBS release
# number using debian-releases.conf.
# Parameters - None.
# No return value.
determine_obs_release()
{
	local input=()
	local oldIFS=$IFS

	IFS="="

	exec 4<"$etclocation/debian-releases.conf"
	while read -u4 -ra input; do
		if [[ "${input[0]}" == "$rel" ]]; then
			obs_rel=${input[1]}
			break
		fi
	done
	exec 4<&-

	IFS=$oldIFS

	if [[ -z $obs_rel ]]; then
		script_exit 78
	fi
}

# Process the config file just for the parameters of interest.
# Parameters - None
# No return value.
proc_config_file()
{
	local input=()
	local oldIFS=$IFS

	IFS="="

	exec 3<"$etclocation/lxcu.conf"
	while read -u3 -ra input; do
		case ${input[0]} in
		dist)
			dist=${input[1]}
			;;
		rel)
			rel=${input[1]}
			determine_obs_release
			;;
		arch)
			arch=${input[1]}
			;;
		contlocation)
			contlocation=$(echo ${input[1]} | envsubst)
			;;
		bridge)
			bridge=${input[1]}
			;;
		ethernetprefix)
			ethernetprefix=${input[1]}
			;;
		vni)
			vni=${input[1]}
			;;
		gitemail)
			gitemail=${input[1]}
			;;
		gitname)
			gitname=${input[1]}
			;;
		localelang)
			localelang=${input[1]}
			;;
		localex11keymap)
			localex11keymap=${input[1]}
			;;
		esac
	done
	exec 3<&-

	IFS=$oldIFS
}

# Process command line arguments with GNU getopt.
# Parameters -	$1 is the command line.
# No return value.
proc_CL()
{
	local GETOPTTEMP
	local msg
	local tmp

	tmp="getopt -o a:d:hn:r:t:V --long arch:,dist:,help,name:,rel:"
	tmp+=",type:,version"
	GETOPTTEMP=$($tmp -n "$0" -- "$@")
	std_cmd_err_handler $?

	eval set -- "$GETOPTTEMP"
	std_cmd_err_handler $?

	while true; do
		case "$1" in
		-a|----arch)
			arch=$2
			shift 2
			;;
		-d|--dist)
			dist=$2
			shift 2
			;;
		-h|--help)
			usage
			shift
			script_exit 0
			;;
		-n|--name)
			name=$2
			shift 2
			;;
		-r|--rel)
			rel=$2
			determine_obs_release
			shift 2
			;;
		-t|--type)
			type=$2
			shift 2
			;;
		-V|--version)
			printf "%s Script version %s\n" $0 $version
			printf "%s Package version %s\n" $0 $packageversion
			shift
			script_exit 0
			;;
		--)	shift
			break
			;;
		*)	output "Internal error." 1
			script_exit 64
			;;
		esac
	done

	# Script does not accept other arguments.
	if (( $# > 0 )); then
		output "Invalid argument." 1
		script_exit 64
	fi

	# At least container name and type must be specified.
	if [[ -z $name || -z $type ]]; then
		output "At least name and type must be specified." 1
		script_exit 64
	fi
}

# Setup network configuration.
# No parameters.
# No return value.
network_config()
{
	if [[ -n $bridge ]]; then
		cp -v $contlocation/$name/config \
			$contlocation/$name/config-$bridge
		std_cmd_err_handler $?
		cat $etclocation/$bridge.conf \
			| tee -a $contlocation/$name/config-$bridge
		std_cmd_err_handler $?
	fi
	cat $etclocation/$vni.conf | tee -a $contlocation/$name/config
	std_cmd_err_handler $?
}

# Setup some git defaults
# No parameters.
# No return value.
setup_git()
{
	@bindir@/lxcu-attach.sh -n $name \
		-- git -- config --system user.email "$gitemail"
	std_cmd_err_handler $?
	@bindir@/lxcu-attach.sh -n $name \
		-- git -- config --system user.name "$gitname"
	std_cmd_err_handler $?
}

# Create the specified type of APT container.
# Parameters - $1 is the type to create.
# No return value.
create_deb_type()
{
	if [[ -e $etclocation/$dist/$rel/$1/install.list ]]; then
		grep -v '^[[:blank:]]*#' \
			$etclocation/$dist/$rel/$1/install.list \
			| xargs @bindir@/lxcu-attach.sh -n $name \
			-- sudo apt-get -- -y install
		std_cmd_err_handler $?
	fi
	if [[ -e $etclocation/$dist/$rel/$1/cache.list ]]; then
		grep -v '^[[:blank:]]*#' $etclocation/$dist/$rel/$1/cache.list \
			| xargs @bindir@/lxcu-attach.sh -n $name \
			-- sudo apt-get -- -yd install
		std_cmd_err_handler $?
	fi
	# Setup git.
	if [[ $1 == "dev" ]]; then
		setup_git
	fi

}

# Create an APT container.
# No parameters.
# No return value.
create_deb()
{
	# Set up the initial apt files, (just sources.list).
	sudo cp -v $(find $etclocation/$dist/$rel/apt -maxdepth 1 -type f) \
		$contlocation/$name/rootfs/etc/apt
	std_cmd_err_handler $?
	sudo chown -v 100000:100000 $contlocation/$name/rootfs/etc/apt
	std_cmd_err_handler $?
	sudo sed -i -e "s|@rel@|$rel|g" \
		$(find $contlocation/$name/rootfs/etc/apt -maxdepth 1 -type f)
	std_cmd_err_handler $?
	sudo sed -i -e "s|@obs_rel@|$obs_rel|g" \
		$(find $contlocation/$name/rootfs/etc/apt -maxdepth 1 -type f)
	std_cmd_err_handler $?

	# Initially install apt https transport, apt utils, certificates, curl,
	# gnupg and sudo.
	@bindir@/lxcu-start.sh -n $name
	std_cmd_err_handler $?
	@bindir@/lxcu-attach.sh -n $name -- apt-get update
	std_cmd_err_handler $?
	@bindir@/lxcu-attach.sh "-n $name -vPATH=$PATH:/sbin:/usr/sbin" \
		-- apt-get -- -y install apt-transport-https apt-utils \
		ca-certificates curl gnupg sudo
	std_cmd_err_handler $?

	# Set the locale.
	@bindir@/lxcu-attach.sh -n $name \
		-- sudo localectl set-locale LANG=$localelang
	std_cmd_err_handler $?
	# x11 keymap also used for the virtual console.
	@bindir@/lxcu-attach.sh -n $name \
		-- sudo localectl set-x11-keymap $localex11keymap
	std_cmd_err_handler $?

	# Get the OBS repo key.
	if [[ $dist == "debian" ]]; then
		curl -fsSL https://download.opensuse.org/repositories/home:m-grant-prg/Debian_$obs_rel/Release.key \
			| gpg --dearmor \
			| sudo tee $contlocation/$name/rootfs/etc/apt/trusted.gpg.d/home_m-grant-prg.gpg > /dev/null
		std_cmd_err_handler $?
	fi

	# Set up the other initial apt files.
	sudo cp -rv $etclocation/$dist/$rel/apt/* \
		$contlocation/$name/rootfs/etc/apt
	std_cmd_err_handler $?
	sudo chown -Rv 100000:100000 $contlocation/$name/rootfs/etc/apt
	std_cmd_err_handler $?
	sudo sed -i -e "s|@rel@|$rel|g" \
		$(find $contlocation/$name/rootfs/etc/apt -maxdepth 1 -type f)
	std_cmd_err_handler $?
	sudo sed -i -e "s|@obs_rel@|$obs_rel|g" \
		$(find $contlocation/$name/rootfs/etc/apt -maxdepth 1 -type f)
	std_cmd_err_handler $?
	sudo sed -i -e "s|@rel@|$rel|g" \
		$(find $contlocation/$name/rootfs/etc/apt/sources.list.d \
			-maxdepth 1 -type f)
	std_cmd_err_handler $?
	sudo sed -i -e "s|@obs_rel@|$obs_rel|g" \
		$(find $contlocation/$name/rootfs/etc/apt/sources.list.d \
			-maxdepth 1 -type f)

	# Set up the dosab files.
	@bindir@/lxcu-attach.sh -n $name -- sudo apt-get update
	std_cmd_err_handler $?
	@bindir@/lxcu-attach.sh -n $name \
		-- sudo apt-get -- -y install server-dependency
	std_cmd_err_handler $?
	sudo cp -v $etclocation/$dist/$rel/dosab/* \
		$contlocation/$name/rootfs/etc/dosab
	std_cmd_err_handler $?
	sudo chown -Rv 100000:100000 $contlocation/$name/rootfs/etc/dosab
	std_cmd_err_handler $?
	sudo sed -i -e "s|@rel@|$rel|g" \
		$(find $contlocation/$name/rootfs/etc/dosab -maxdepth 1 -type f)
	std_cmd_err_handler $?
	sudo sed -i -e "s|@obs_rel@|$obs_rel|g" \
		$(find $contlocation/$name/rootfs/etc/dosab -maxdepth 1 -type f)
	std_cmd_err_handler $?
	@bindir@/lxcu-attach.sh -n $name -- sudo dosab.sh
	std_cmd_err_handler $?

	# Final fundamental installs.
	@bindir@/lxcu-attach.sh -n $name -- sudo apt-get update
	std_cmd_err_handler $?
	@bindir@/lxcu-attach.sh -n $name -- sudo apt-get -- -y install apt
	std_cmd_err_handler $?
	if [[ $rel == "xenial" ]]; then
		@bindir@/lxcu-attach.sh -n $name -- sudo apt-key update
		std_cmd_err_handler $?
		@bindir@/lxcu-attach.sh -n $name -- sudo apt-get update
		std_cmd_err_handler $?
	fi
	@bindir@/lxcu-attach.sh -n $name -- sudo apt-get -- -y install agmaint
	std_cmd_err_handler $?
	@bindir@/lxcu-attach.sh -n $name -- sudo agmaint.sh -- -- -y
	std_cmd_err_handler $?
	@bindir@/lxcu-attach.sh -n $name \
		-- sudo apt-key-scripts.sh -- --install \
		/usr/share/agmaint/trusted.sh.d/add-hermes.sh
	std_cmd_err_handler $?
	if [[ $dist == "ubuntu" ]]; then
		@bindir@/lxcu-attach.sh -n $name \
			-- sudo apt-key-scripts.sh -- --install \
			/usr/share/agmaint/trusted.sh.d/add-mgrant-utils-ppa.sh
		std_cmd_err_handler $?
	fi

	create_deb_type basic
	if [[ $type != "basic" ]]; then
		create_deb_type $type
	fi

	lxc-stop -n $name
	std_cmd_err_handler $?
}

# Create the specified type of Fedora container.
# Parameters - $1 is the type to create.
# No return value.
create_fedora_type()
{
	# Install the development tools group.
	if [[ $1 == "dev" ]]; then
		@bindir@/lxcu-attach.sh -n $name \
			-- sudo dnf -- -y group install "Development Tools"
		std_cmd_err_handler $?
	fi

	if [[ -e $etclocation/$dist/$rel/$1/install.list ]]; then
		grep -v '^[[:blank:]]*#' \
			$etclocation/$dist/$rel/$1/install.list \
			| xargs @bindir@/lxcu-attach.sh -n $name \
			-- sudo dnf -- -y install
		std_cmd_err_handler $?
	fi
	if [[ -e $etclocation/$dist/$rel/$1/cache.list ]]; then
		grep -v '^[[:blank:]]*#' $etclocation/$dist/$rel/$1/cache.list \
			| xargs @bindir@/lxcu-attach.sh -n $name \
			-- sudo dnf -- -y install --downloadonly
		std_cmd_err_handler $?
	fi
	# Setup git.
	if [[ $1 == "dev" ]]; then
		setup_git
	fi
}

# Create a Fedora container.
# No parameters.
# No return value.
create_fedora()
{
	@bindir@/lxcu-start.sh -n $name
	std_cmd_err_handler $?

	# Set dnf to keep download only packagfes in the cache.
	echo "keepcache=True" | \
		sudo tee -a $contlocation/$name/rootfs/etc/dnf/dnf.conf
	std_cmd_err_handler $?

	# Set locale.
	@bindir@/lxcu-attach.sh -n $name -- sudo dnf -- -y update --refresh
	std_cmd_err_handler $?
	@bindir@/lxcu-attach.sh -n $name \
		-- sudo localectl set-locale LANG=$localelang
	std_cmd_err_handler $?
	@bindir@/lxcu-attach.sh -n $name \
		-- sudo localectl set-x11-keymap $localex11keymap
	std_cmd_err_handler $?

	# Initial installs.
	@bindir@/lxcu-attach.sh -n $name \
		-- sudo dnf -- -y install 'dnf-command(config-manager)'
	std_cmd_err_handler $?

	# Add the opeSUSE Build Service repository.
	@bindir@/lxcu-attach.sh -n $name \
		-- sudo dnf config-manager -- --add-repo \
		https://download.opensuse.org/repositories/home:m-grant-prg/Fedora_$rel/home:m-grant-prg.repo
	std_cmd_err_handler $?

	# Set up the dosab files.
	@bindir@/lxcu-attach.sh -n $name -- sudo dnf -- -y update --refresh
	std_cmd_err_handler $?
	@bindir@/lxcu-attach.sh -n $name \
		-- sudo dnf -- -y install server-dependency
	std_cmd_err_handler $?
	sudo cp -v $etclocation/$dist/$rel/dosab/* \
		$contlocation/$name/rootfs/etc/dosab
	std_cmd_err_handler $?
	sudo chown -Rv 100000:100000 $contlocation/$name/rootfs/etc/dosab
	std_cmd_err_handler $?
	@bindir@/lxcu-attach.sh -n $name -- sudo dosab.sh
	std_cmd_err_handler $?

	# Final tidy.
	@bindir@/lxcu-attach.sh -n $name -- sudo dnf -- -y update --refresh
	std_cmd_err_handler $?
	@bindir@/lxcu-attach.sh -n $name -- sudo dnf -- -y autoremove
	std_cmd_err_handler $?

	create_fedora_type basic
	if [[ $type != "basic" ]]; then
		create_fedora_type $type
	fi

	lxc-stop -n $name
	std_cmd_err_handler $?
}

# Create the specified type of openSUSE container.
# Parameters - $1 is the type to create.
# No return value.
create_opensuse_type()
{
	# Install the development tools.
	if [[ $1 == "dev" ]]; then
		@bindir@/lxcu-attach.sh -n $name \
			-- sudo zypper -- -n install -t pattern devel_basis
		std_cmd_err_handler $?
	fi

	if [[ -e $etclocation/$dist/$rel/$1/install.list ]]; then
		grep -v '^[[:blank:]]*#' \
			$etclocation/$dist/$rel/$1/install.list \
			| xargs @bindir@/lxcu-attach.sh -n $name \
			-- sudo zypper -- -n install
		std_cmd_err_handler $?
	fi
	if [[ -e $etclocation/$dist/$rel/$1/cache.list ]]; then
		grep -v '^[[:blank:]]*#' $etclocation/$dist/$rel/$1/cache.list \
			| xargs @bindir@/lxcu-attach.sh -n $name \
			-- sudo zypper -- -n install --download-only
		std_cmd_err_handler $?
	fi
	# Setup git.
	if [[ $1 == "dev" ]]; then
		setup_git
	fi
}

# Create an openSUSE container.
# No parameters.
# No return value.
create_opensuse()
{
	@bindir@/lxcu-start.sh -n $name
	std_cmd_err_handler $?

	# Set locale.
	@bindir@/lxcu-attach.sh -n $name -- sudo zypper -- refresh
	std_cmd_err_handler $?
	@bindir@/lxcu-attach.sh -n $name -- sudo zypper -- -n update
	std_cmd_err_handler $?
	@bindir@/lxcu-attach.sh -n $name \
		-- sudo zypper -- -n install glibc-locale
	std_cmd_err_handler $?
	@bindir@/lxcu-attach.sh -n $name \
		-- sudo localectl set-locale LANG=$localelang
	std_cmd_err_handler $?
	@bindir@/lxcu-attach.sh -n $name \
		-- sudo localectl set-x11-keymap $localex11keymap
	std_cmd_err_handler $?

	# Add the opeSUSE Build Service repository.
	@bindir@/lxcu-attach.sh -n $name \
		-- sudo zypper addrepo https://download.opensuse.org/repositories/home:m-grant-prg/$rel/home:m-grant-prg.repo
	std_cmd_err_handler $?

	# Set up the dosab files.
	@bindir@/lxcu-attach.sh -n $name -- sudo zypper -- refresh
	std_cmd_err_handler $?
	@bindir@/lxcu-attach.sh -n $name -- sudo zypper -- -n update
	std_cmd_err_handler $?
	@bindir@/lxcu-attach.sh -n $name \
		-- sudo zypper -- -n install server-dependency
	std_cmd_err_handler $?
	sudo cp -v $etclocation/$dist/$rel/dosab/* \
		$contlocation/$name/rootfs/etc/dosab
	std_cmd_err_handler $?
	sudo chown -Rv 100000:100000 $contlocation/$name/rootfs/etc/dosab
	std_cmd_err_handler $?
	@bindir@/lxcu-attach.sh -n $name -- sudo dosab.sh
	std_cmd_err_handler $?

	# Final tidy.
	@bindir@/lxcu-attach.sh -n $name -- sudo zypper -- refresh
	std_cmd_err_handler $?
	@bindir@/lxcu-attach.sh -n $name -- sudo zypper -- -n update
	std_cmd_err_handler $?

	create_opensuse_type basic
	if [[ $type != "basic" ]]; then
		create_opensuse_type $type
	fi

	lxc-stop -n $name
	std_cmd_err_handler $?
}


########
# Main #
########

proc_config_file

proc_CL "$@"

# With the demise of sks-keyservers.net force an alternative keyserver.
lxc-create -t download -n $name -- --keyserver hkps://keyserver.ubuntu.com
std_cmd_err_handler $?

network_config

case $dist in
debian)
	create_deb
	;;
fedora)
	create_fedora
	;;
opensuse)
	create_opensuse
	;;
ubuntu)
	create_deb
	;;
*)
	output "Unknown distribution." 1
	script_exit 64
	break
	;;
esac

# And exit.
script_exit 0

