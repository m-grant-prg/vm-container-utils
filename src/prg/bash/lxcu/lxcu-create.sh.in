#! @bashlocation@
#########################################################################
#									#
#	lxcu-create.sh is automatically generated,			#
#		please do not modify!					#
#									#
#########################################################################

#########################################################################
#									#
# Script ID: lxcu-create.sh						#
# Author: Copyright (C) 2020, 2021  Mark Grant				#
#									#
# Released under the GPLv3 only.					#
# SPDX-License-Identifier: GPL-3.0					#
#									#
# Purpose:								#
# A script to create linux containers.					#
#                                                            	  	#
# Syntax:      lxcu-create.sh [ -a or --arch 'arch-name'		#
#			|| -d or --dist 'distribution-name'		#
#			|| -h or --help					#
#			|| -n or --name 'container name'		#
#			|| -r or --rel 'release-name'			#
#			|| -t or --type 'type-name'			#
#			|| -V or --version ]				#
#									#
# Exit codes used:-							#
# Bash standard Exit Codes:	0 - success				#
#				1 - general failure			#
# User-defined exit code range is 64 - 113				#
#	C/C++ Semi-standard exit codes from sysexits.h range is 64 - 78	#
#		EX_USAGE	64	command line usage error	#
#		EX_DATAERR	65	data format error		#
#		EX_NOINPUT	66	cannot open input		#
#		EX_NOUSER	67	addressee unknown		#
#		EX_NOHOST	68	host name unknown		#
#		EX_UNAVAILABLE	69	service unavailable		#
#		EX_SOFTWARE	70	internal software error		#
#		EX_OSERR	71	system error (e.g., can't fork)	#
#		EX_OSFILE	72	critical OS file missing	#
#		EX_CANTCREAT	73	can't create (user) output file	#
#		EX_IOERR	74	input/output error		#
#		EX_TEMPFAIL	75	temp failure; user is invited	#
#					to retry			#
#		EX_PROTOCOL	76	remote error in protocol	#
#		EX_NOPERM	77	permission denied		#
#		EX_CONFIG	78	configuration error		#
#	User-defined (here) exit codes range 79 - 113:			#
#		None							#
#									#
# Further Info:								#
#									#
#########################################################################

#########################################################################
#									#
# Changelog								#
#									#
# Date		Author	Version	Description				#
#									#
# 23/09/2020	MG	1.0.1	Created.				#
# 05/10/2020	MG	1.0.2	Replace sleeps with network wait in	#
#				lxcu-start.sh				#
# 18/11/2020	MG	1.0.3	Do initial install of apt https prior	#
#				to adding repo for server-dependency to	#
#				avoid hang on https comms.		#
#				Ensure apt update is run after changing	#
#				repos.					#
#				Do apt-get update after apt-key update.	#
# 13/02/2021	MG	1.0.4	Use OBS instead of Bintray.		#
#				Prepend this package executable		#
#				invocations with bindir.		#
#									#
#########################################################################


set -o pipefail


##################
# Init variables #
##################
readonly outputprefix="$(basename $0):"

readonly version=1.0.4				# Script version
readonly packageversion=@pkgversion@		# Package version

readonly etclocation=@sysconfdir@/lxcu		# Path to config directory

obs_rel=""	# OBS Release number (Debian)


#############
# Functions #
#############

# -h --help output.
# No parameters
# No return value
usage()
{
cat << EOF
Usage is $0 [options]
	-a or --arch 'arch-name' Architecture for the container
	-d or --dist 'distribution-name'
	-h or --help Display this help information
	-n or --name 'container name'
	-r or --rel 'release-name'
	-t or --type 'type-name' e.g. basic or dev.....
	-V or --version Print script version information
EOF
}

# Standard function to emit messages depending on various parameters.
# Parameters -	$1 What:-	The message to emit.
#		$2 Where:-	stdout == 0
#				stderr == 1
# No return value.
output()
{
	if (( !$2 )); then
		printf "%s\n" "$1"
	else
		printf "%s\n" "$1" 1>&2
	fi
}

# Standard function to tidy up and return exit code.
# Parameters - 	$1 is the exit code.
# No return value.
script_exit()
{
	exit $1
}

# Standard function to test command error and exit if non-zero.
# Parameters - 	$1 is the exit code, (normally $? from the preceeding command).
# No return value.
std_cmd_err_handler()
{
	if (( $1 )); then
		script_exit $1
	fi
}

# Standard trap exit function.
# No parameters.
# No return value.
trap_exit()
{
	local -i exit_code=$?
	local msg

	msg="Script terminating with exit code $exit_code due to trap received."
	output "$msg" 1
	script_exit $exit_code
}

# Setup trap
trap trap_exit SIGHUP SIGINT SIGQUIT SIGTERM

# Debian / Raspbian only. Convert the usual release string into an OBS release
# number.
# Parameters - None.
# No return value.
determine_obs_release()
{
	case $rel in
	stretch)
		obs_rel="9.0"
		;;
	buster)
		obs_rel="10"
		;;
	bullseye)
		obs_rel="11"
		;;
	bookworm)
		obs_rel="12"
		;;
	esac
}

# Process the config file just for the parameters of interest.
# Parameters - None
# No return value.
proc_config_file()
{
	local input=()
	local oldIFS=$IFS

	IFS="="

	exec 3<"$etclocation/lxcu.conf"
	while read -u3 -ra input; do
		case ${input[0]} in
		dist)
			dist=${input[1]}
			;;
		rel)
			rel=${input[1]}
			determine_obs_release
			;;
		arch)
			arch=${input[1]}
			;;
		contlocation)
			contlocation=$(echo ${input[1]} | envsubst)
			;;
		bridge)
			bridge=${input[1]}
			;;
		ethernetprefix)
			ethernetprefix=${input[1]}
			;;
		vni)
			vni=${input[1]}
			;;
		esac
	done
	exec 3<&-

	IFS=$oldIFS
}

# Process command line arguments with GNU getopt.
# Parameters -	$1 is the command line.
# No return value.
proc_CL()
{
	local GETOPTTEMP
	local msg
	local tmp

	tmp="getopt -o a:d:hn:r:t:V --long arch:,dist:,help,name:,rel:"
	tmp+=",type:,version"
	GETOPTTEMP=$($tmp -n "$0" -- "$@")
	std_cmd_err_handler $?

	eval set -- "$GETOPTTEMP"
	std_cmd_err_handler $?

	while true; do
		case "$1" in
		-a|----arch)
			arch=$2
			shift 2
			;;
		-d|--dist)
			dist=$2
			shift 2
			;;
		-h|--help)
			usage
			shift
			script_exit 0
			;;
		-n|--name)
			name=$2
			shift 2
			;;
		-r|--rel)
			rel=$2
			determine_obs_release
			shift 2
			;;
		-t|--type)
			type=$2
			shift 2
			;;
		-V|--version)
			printf "%s Script version %s\n" $0 $version
			printf "%s Package version %s\n" $0 $packageversion
			shift
			script_exit 0
			;;
		--)	shift
			break
			;;
		*)	output "Internal error." 1
			script_exit 64
			;;
		esac
	done

	# Script does not accept other arguments.
	if (( $# > 0 )); then
		output "Invalid argument." 1
		script_exit 64
	fi

	# At least container name and type must be specified.
	if [[ -z $name  || -z $type ]]; then
		output "At least name and type must be specified." 1
		script_exit 64
	fi
}

# Setup network configuration.
# No parameters.
# No return value.
network_config()
{
	if [[ -n $bridge ]]; then
		cp -v $contlocation/$name/config \
			$contlocation/$name/config-$bridge
		std_cmd_err_handler $?
		cat $etclocation/$bridge.conf \
			| tee -a $contlocation/$name/config-$bridge
		std_cmd_err_handler $?
	fi
	cat $etclocation/$vni.conf | tee -a $contlocation/$name/config
	std_cmd_err_handler $?
}

# Create the specified type.
# Parameters - $1 is the type to create.
# No return value.
create_deb_type()
{
	@bindir@/lxcu-start.sh -n $name
	std_cmd_err_handler $?

	if [[ -e $etclocation/$dist/$1/install.list ]]; then
		cat $etclocation/$dist/$1/install.list \
			| xargs lxc-attach -n $name sudo apt-get -- -y install
		std_cmd_err_handler $?
	fi
	if [[ -e $etclocation/$dist/$rel/$1/install.list ]]; then
		cat $etclocation/$dist/$rel/$1/install.list \
			| xargs lxc-attach -n $name sudo apt-get -- -y install
		std_cmd_err_handler $?
	fi
	if [[ -e $etclocation/$dist/$1/cache.list ]]; then
		cat $etclocation/$dist/$1/cache.list \
			| xargs lxc-attach -n $name sudo apt-get -- -yd install
		std_cmd_err_handler $?
	fi
	if [[ -e $etclocation/$dist/$rel/$1/cache.list ]]; then
		cat $etclocation/$dist/$rel/$1/cache.list \
			| xargs lxc-attach -n $name sudo apt-get -- -yd install
		std_cmd_err_handler $?
	fi

	lxc-stop -n $name
	std_cmd_err_handler $?
}

# Create an APT package distribution.
# No parameters.
# No return value.
create_deb()
{
	# Set up the initial apt files, (just sources.list).
	sudo cp -v $(find $etclocation/$dist/apt -maxdepth 1 -type f) \
		$contlocation/$name/rootfs/etc/apt
	std_cmd_err_handler $?
	sudo chown -v 100000:100000  $contlocation/$name/rootfs/etc/apt
	std_cmd_err_handler $?
	sudo sed -i -e "s|@rel@|$rel|g" \
		$(find $contlocation/$name/rootfs/etc/apt -maxdepth 1 -type f)
	std_cmd_err_handler $?
	sudo sed -i -e "s|@obs_rel@|$obs_rel|g" \
		$(find $contlocation/$name/rootfs/etc/apt -maxdepth 1 -type f)
	std_cmd_err_handler $?

	# Initially install apt https and sudo.
	@bindir@/lxcu-start.sh -n $name
	std_cmd_err_handler $?
	lxc-attach -n $name apt-get update
	std_cmd_err_handler $?
	lxc-attach -n $name -vPATH=$PATH:/sbin:/usr/sbin \
		apt-get -- -y install apt-transport-https apt-utils \
		ca-certificates sudo
	std_cmd_err_handler $?
	lxc-stop -n $name
	std_cmd_err_handler $?

	# Set up the other initial apt files.
	sudo cp -rv $etclocation/$dist/apt/* $contlocation/$name/rootfs/etc/apt
	std_cmd_err_handler $?
	sudo chown -Rv 100000:100000  $contlocation/$name/rootfs/etc/apt
	std_cmd_err_handler $?
	sudo sed -i -e "s|@rel@|$rel|g" \
		$(find $contlocation/$name/rootfs/etc/apt -maxdepth 1 -type f)
	std_cmd_err_handler $?
	sudo sed -i -e "s|@obs_rel@|$obs_rel|g" \
		$(find $contlocation/$name/rootfs/etc/apt -maxdepth 1 -type f)
	std_cmd_err_handler $?
	sudo sed -i -e "s|@rel@|$rel|g" \
		$(find $contlocation/$name/rootfs/etc/apt/sources.list.d \
			-maxdepth 1 -type f)
	std_cmd_err_handler $?
	sudo sed -i -e "s|@obs_rel@|$obs_rel|g" \
		$(find $contlocation/$name/rootfs/etc/apt/sources.list.d \
			-maxdepth 1 -type f)

	# Set up the dosab files.
	@bindir@/lxcu-start.sh -n $name
	std_cmd_err_handler $?
	lxc-attach -n $name sudo apt-get update
	std_cmd_err_handler $?
	lxc-attach -n $name sudo apt-get -- -y install server-dependency
	std_cmd_err_handler $?
	lxc-stop -n $name
	std_cmd_err_handler $?
	sudo cp -v $etclocation/$dist/dosab/* \
		$contlocation/$name/rootfs/etc/dosab
	std_cmd_err_handler $?
	sudo chown -Rv 100000:100000  $contlocation/$name/rootfs/etc/dosab
	std_cmd_err_handler $?
	sudo sed -i -e "s|@rel@|$rel|g" \
		$(find $contlocation/$name/rootfs/etc/dosab -maxdepth 1 -type f)
	std_cmd_err_handler $?
	sudo sed -i -e "s|@obs_rel@|$obs_rel|g" \
		$(find $contlocation/$name/rootfs/etc/dosab -maxdepth 1 -type f)
	std_cmd_err_handler $?

	# Final fundamental installs.
	@bindir@/lxcu-start.sh -n $name
	std_cmd_err_handler $?
	lxc-attach -n $name sudo apt-get update
	std_cmd_err_handler $?
	lxc-attach -n $name sudo apt-get -- -y install gnupg
	std_cmd_err_handler $?
	lxc-attach -n $name sudo apt-get -- -y install apt agmaint
	std_cmd_err_handler $?
	lxc-attach -n $name sudo apt-key update
	std_cmd_err_handler $?
	lxc-attach -n $name sudo apt-get update
	std_cmd_err_handler $?
	lxc-attach -n $name sudo agmaint.sh -- -- -y
	std_cmd_err_handler $?
	lxc-stop -n $name
	std_cmd_err_handler $?

	create_deb_type basic
	if [[ $type != "basic" ]]; then
		create_deb_type $type
	fi
}


########
# Main #
########

proc_config_file

proc_CL "$@"

lxc-create -t download -n $name
std_cmd_err_handler $?

network_config

case $dist in
debian)
	create_deb
	;;
ubuntu)
	create_deb
	;;
*)
	output "Unknown distribution." 1
	script_exit 64
	break
	;;
esac

# And exit.
script_exit 0

