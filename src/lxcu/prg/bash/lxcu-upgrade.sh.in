#! @bashlocation@
#########################################################################
#									#
#	lxcu-upgrade is automatically generated,			#
#		please do not modify!					#
#									#
#########################################################################

#########################################################################
#									#
# Author: Copyright (C) 2020-2024  Mark Grant				#
#									#
# Released under the GPLv3 only.					#
# SPDX-License-Identifier: GPL-3.0-only					#
#									#
# Purpose:								#
# A script to upgrade linux containers.					#
#									#
# Syntax:	See usage()						#
#									#
# Exit codes used:-							#
# Bash standard Exit Codes:	0 - success				#
#				1 - general failure			#
# User-defined exit code range is 64 - 113				#
#	C/C++ Semi-standard exit codes from sysexits.h range is 64 - 78	#
#		EX_USAGE	64	command line usage error	#
#		EX_DATAERR	65	data format error		#
#		EX_NOINPUT	66	cannot open input		#
#		EX_NOUSER	67	addressee unknown		#
#		EX_NOHOST	68	host name unknown		#
#		EX_UNAVAILABLE	69	service unavailable		#
#		EX_SOFTWARE	70	internal software error		#
#		EX_OSERR	71	system error (e.g., can't fork)	#
#		EX_OSFILE	72	critical OS file missing	#
#		EX_CANTCREAT	73	can't create (user) output file	#
#		EX_IOERR	74	input/output error		#
#		EX_TEMPFAIL	75	temp failure; user is invited	#
#					to retry			#
#		EX_PROTOCOL	76	remote error in protocol	#
#		EX_NOPERM	77	permission denied		#
#		EX_CONFIG	78	configuration error		#
#	User-defined (here) exit codes range 79 - 113:			#
#		None							#
#									#
# Further Info:								#
#									#
#########################################################################


set -o pipefail


##################
# Init variables #
##################
readonly version=1.1.1				# Script version
readonly packageversion=@pkgversion@		# Package version

readonly etclocation=@sysconfdir@/lxcu		# Path to config directory

# Ensure environment variables are set.
export XDG_RUNTIME_DIR="/run/user/$UID"
export DBUS_SESSION_BUS_ADDRESS="unix:path=${XDG_RUNTIME_DIR}/bus"


#############
# Functions #
#############

# -h --help output.
# No parameters
# No return value
usage()
{
cat << EOF
Usage is $0 {-h|-V}
Usage is $0 [-d DISTRIBUTION] [-r RELEASE] -t CONTAINER_TYPE
			-n CONTAINER_NAME
Usage is $0 [options]
	-d or --dist 'distribution-name'
	-h or --help Display this help information
	-n or --name 'container name'
	-r or --rel 'release-name'
	-t or --type 'type-name' e.g. basic or dev.....
	-V or --version Print script version information
EOF
}

# Standard function to emit messages depending on various parameters.
# Parameters -	$1 What:-	The message to emit.
#		$2 Where:-	stdout == 0
#				stderr == 1
# No return value.
output()
{
	if (( !$2 )); then
		printf "%s\n" "$1"
	else
		printf "%s\n" "$1" 1>&2
	fi
}

# Standard function to tidy up and return exit code.
# Parameters - 	$1 is the exit code.
# No return value.
script_exit()
{
	exit "$1"
}

# Standard function to test command error and exit if non-zero.
# Parameters - 	$1 is the exit code, (normally $? from the preceeding command).
# No return value.
std_cmd_err_handler()
{
	if (( $1 )); then
		script_exit "$1"
	fi
}

# Standard trap exit function.
# No parameters.
# No return value.
# shellcheck disable=SC2317  # Do not warn about unreachable commands in trap
# functions, they are legitimate.
trap_exit()
{
	local -i exit_code=$?
	local msg

	msg="Script terminating with exit code $exit_code due to trap received."
	output "$msg" 1
	std_cmd_err_handler $exit_code
}

# Setup trap
trap trap_exit SIGHUP SIGINT SIGQUIT SIGTERM

# Process the config file just for the parameters of interest.
# Parameters - None
# No return value.
proc_config_file()
{
	local input=()
	local msg
	local oldIFS=$IFS

	IFS="="

	if [[ ! -e "$etclocation/lxcu.conf" || ! -f "$etclocation/lxcu.conf" \
		|| ! -r "$etclocation/lxcu.conf" ]]; then
		msg="$etclocation/lxcu.conf must exist, be a file and be"
		msg+=" readable."
		output "$msg" 1
		std_cmd_err_handler 66
	fi

	exec 3<"$etclocation/lxcu.conf"
	std_cmd_err_handler $?
	while read -u3 -ra input; do
		case ${input[0]} in
		dist)
			dist=${input[1]}
			;;
		rel)
			rel=${input[1]}
			;;
		esac
	done
	exec 3<&-

	IFS=$oldIFS
}

# Process command line arguments with GNU getopt.
# Parameters -	$1 is the command line.
# No return value.
proc_CL()
{
	local GETOPTTEMP
	local msg
	local tmp

	tmp="getopt -o d:hn:r:t:V --long dist:,help,name:,rel:,type:,version"
	GETOPTTEMP=$($tmp -n "$0" -- "$@")
	std_cmd_err_handler $?

	eval set -- "$GETOPTTEMP"
	std_cmd_err_handler $?

	while true; do
		case "$1" in
		-d|--dist)
			dist=$2
			shift 2
			;;
		-h|--help)
			usage
			shift
			script_exit 0
			;;
		-n|--name)
			name=$2
			shift 2
			;;
		-r|--rel)
			rel=$2
			shift 2
			;;
		-t|--type)
			type=$2
			shift 2
			;;
		-V|--version)
			printf "%s Script version %s\n" "$0" $version
			printf "%s Package version %s\n" "$0" $packageversion
			shift
			script_exit 0
			;;
		--)	shift
			break
			;;
		*)	output "Internal error." 1
			std_cmd_err_handler 64
			;;
		esac
	done

	# Script does not accept other arguments.
	if (( $# > 0 )); then
		output "Invalid argument." 1
		std_cmd_err_handler 64
	fi

	# At least container name and type must be specified.
	if [[ -z $name || -z $type ]]; then
		output "At least name and type must be specified." 1
		std_cmd_err_handler 64
	fi
}

# Upgrade the specified type.
# Parameters - $1 is the type to upgrade.
# No return value.
upgrade_deb_type()
{
	if [[ -e $etclocation/$dist/$rel/$1/install.list ]]; then
		grep -v '^[[:blank:]]*#' \
			"$etclocation/$dist/$rel/$1/install.list" \
			| xargs @bindir@/lxcu-attach -n "$name" \
			-- sudo apt-get -- -y install
		std_cmd_err_handler $?
	fi
	if [[ -e $etclocation/$dist/$rel/$1/cache.list ]]; then
		grep -v '^[[:blank:]]*#' \
			"$etclocation/$dist/$rel/$1/cache.list" \
			| xargs @bindir@/lxcu-attach -n "$name" \
			-- sudo apt-get -- -yd install
		std_cmd_err_handler $?
	fi
}

# Upgrade an APT package distribution.
# No parameters.
# No return value.
upgrade_deb()
{
	@bindir@/lxcu-start -n "$name"
	std_cmd_err_handler $?
	@bindir@/lxcu-attach -n "$name" -- sudo apt-get update
	std_cmd_err_handler $?
	@bindir@/lxcu-attach -n "$name" -- sudo apt-get -- -y dist-upgrade
	std_cmd_err_handler $?
	@bindir@/lxcu-attach -n "$name" -- sudo agmaint -- -- -y
	std_cmd_err_handler $?

	upgrade_deb_type basic
	if [[ $type != "basic" ]]; then
		upgrade_deb_type "$type"
	fi

	lxc-stop -n "$name"
	std_cmd_err_handler $?
}

# Upgrade the specified type of Fedora container.
# Parameters - $1 is the type to upgrade.
# No return value.
upgrade_fedora_type()
{
	if [[ -e $etclocation/$dist/$rel/$1/install.list ]]; then
		grep -v '^[[:blank:]]*#' \
			"$etclocation/$dist/$rel/$1/install.list" \
			| xargs @bindir@/lxcu-attach -n "$name" \
			-- sudo dnf -- -y install
		std_cmd_err_handler $?
	fi
	if [[ -e $etclocation/$dist/$rel/$1/cache.list ]]; then
		grep -v '^[[:blank:]]*#' \
			"$etclocation/$dist/$rel/$1/cache.list" \
			| xargs @bindir@/lxcu-attach -n "$name" \
			-- sudo dnf -- -y install --downloadonly
		std_cmd_err_handler $?
	fi
}

# Upgrade a Fedora container.
# No parameters.
# No return value.
upgrade_fedora()
{
	@bindir@/lxcu-start -n "$name"
	std_cmd_err_handler $?

	@bindir@/lxcu-attach -n "$name" -- sudo dnf -- -y update --refresh
	std_cmd_err_handler $?
	@bindir@/lxcu-attach -n "$name" -- sudo dnf -- -y autoremove
	std_cmd_err_handler $?

	upgrade_fedora_type basic
	if [[ $type != "basic" ]]; then
		upgrade_fedora_type "$type"
	fi

	lxc-stop -n "$name"
	std_cmd_err_handler $?
}

# Upgrade the specified type of opensuse container.
# Parameters - $1 is the type to upgrade.
# No return value.
upgrade_opensuse_type()
{
	if [[ -e $etclocation/$dist/$rel/$1/install.list ]]; then
		grep -v '^[[:blank:]]*#' \
			"$etclocation/$dist/$rel/$1/install.list" \
			| xargs @bindir@/lxcu-attach -n "$name" \
			-- sudo zypper -- -n install
		std_cmd_err_handler $?
	fi
	if [[ -e $etclocation/$dist/$rel/$1/cache.list ]]; then
		grep -v '^[[:blank:]]*#' \
			"$etclocation/$dist/$rel/$1/cache.list" \
			| xargs @bindir@/lxcu-attach -n "$name" \
			-- sudo zypper -- -n install --download-only
		std_cmd_err_handler $?
	fi
}

# Upgrade an opensuse container.
# No parameters.
# No return value.
upgrade_opensuse()
{
	@bindir@/lxcu-start -n "$name"
	std_cmd_err_handler $?

	@bindir@/lxcu-attach -n "$name" -- sudo zypper -- refresh
	std_cmd_err_handler $?
	@bindir@/lxcu-attach -n "$name" -- sudo zypper -- -n update
	std_cmd_err_handler $?

	upgrade_opensuse_type basic
	if [[ $type != "basic" ]]; then
		upgrade_opensuse_type "$type"
	fi

	lxc-stop -n "$name"
	std_cmd_err_handler $?
}


########
# Main #
########

proc_config_file

proc_CL "$@"

case $dist in
debian)
	upgrade_deb
	;;
fedora)
	upgrade_fedora
	;;
opensuse)
	upgrade_opensuse
	;;
ubuntu)
	upgrade_deb
	;;
*)
	output "Unknown distribution." 1
	std_cmd_err_handler 64
	;;
esac

# And exit.
script_exit 0

